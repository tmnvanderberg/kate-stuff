<snippets
    namespace=""
    license="GPL"
    filetypes="C++;C++/Qt4"
    snippetlicense="public domain"
    authors="Alex Turbov &lt;I.zaufi@gmail.com&gt;"
    name="boost::test by zaufi"
  >
  <!-- Version 1.5 -->
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_MODULE</match>
  <displaypostfix></displaypostfix>
  <displayarguments></displayarguments>
  <fillin>#define BOOST_TEST_MODULE ${name}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(std::cout compatible expression)</displayarguments>
  <fillin>BOOST_TEST_MESSAGE("${msg}");${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_CHECKPOINT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(std::cout compatible expression)</displayarguments>
  <fillin>BOOST_TEST_CHECKPOINT("${msg}");${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_PASSPOINT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>()</displayarguments>
  <fillin>BOOST_TEST_PASSPOINT();${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_FAIL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(message)</displayarguments>
  <fillin>BOOST_FAIL("${msg}");${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_WARN(${expr});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_CHECK(${expr});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_REQUIRE(${expr});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, msg)</displayarguments>
  <fillin>BOOST_WARN_MESSAGE(${expr}, "${msg}");${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, msg)</displayarguments>
  <fillin>BOOST_CHECK_MESSAGE(${expr}, "${msg}");${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, msg)</displayarguments>
  <fillin>BOOST_REQUIRE_MESSAGE(${expr}, "${msg}");${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_BITWISE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_BITWISE_EQUAL(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_BITWISE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_BITWISE_EQUAL(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_BITWISE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_BITWISE_EQUAL(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_EQUAL(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_EQUAL(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_EQUAL(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_EQUAL_COLLECTIONS</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left_begin, left_end, right_begin, right_end)</displayarguments>
  <fillin>BOOST_WARN_EQUAL_COLLECTIONS(${left}.begin(), %{left}.end(), ${right}.begin(), %{right}.end());${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_EQUAL_COLLECTIONS</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left_begin, left_end, right_begin, right_end)</displayarguments>
  <fillin>BOOST_CHECK_EQUAL_COLLECTIONS(${left}.begin(), %{left}.end(), ${right}.begin(), %{right}.end());${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_EQUAL_COLLECTIONS</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left_begin, left_end, right_begin, right_end)</displayarguments>
  <fillin>BOOST_REQUIRE_EQUAL_COLLECTIONS(${left}.begin(), %{left}.end(), ${right}.begin(), %{right}.end());${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_GE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_GE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_GE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_GE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_GE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_GE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_GT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_GT(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_GT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_GT(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_GT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_GT(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_LE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_LE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_LE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_LE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_LE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_LE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_LT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_LT(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_LT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_LT(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_LT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_LT(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_NE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_NE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_NE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_NE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_NE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_NE(${left}, ${right});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_WARN_THROW(${expr}, ${excpt:std::exception});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_CHECK_THROW(${expr}, ${excpt:std::exception});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_REQUIRE_THROW(${expr}, ${excpt:std::exception});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_EXCEPTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt, predicate)</displayarguments>
  <fillin>BOOST_WARN_EXCEPTION(${expr}, ${excpt:std::exception}, ${predicate});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_EXCEPTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt, predicate)</displayarguments>
  <fillin>BOOST_CHECK_EXCEPTION(${expr}, ${excpt:std::exception}, ${predicate});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_EXCEPTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt, predicate)</displayarguments>
  <fillin>BOOST_REQUIRE_EXCEPTION(${expr}, ${excpt:std::exception}, ${predicate});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_NO_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_WARN_NO_THROW(${expr});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_NO_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_CHECK_NO_THROW(${expr});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_NO_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_REQUIRE_NO_THROW(${expr});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_CLOSE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_WARN_CLOSE(${left}, ${right}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_CLOSE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_CHECK_CLOSE(${left}, ${right}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_CLOSE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_REQUIRE_CLOSE(${left}, ${right}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_CLOSE_FRACTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_WARN_CLOSE_FRACTION(${left}, ${right}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_CLOSE_FRACTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_CHECK_CLOSE_FRACTION(${left}, ${right}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_CLOSE_FRACTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_REQUIRE_CLOSE_FRACTION(${left}, ${right}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_PREDICATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(predicate, args_pp_seq)</displayarguments>
  <fillin>BOOST_WARN_PREDICATE(${pred}, (${p1}));${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_PREDICATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(predicate, args_pp_seq)</displayarguments>
  <fillin>BOOST_CHECK_PREDICATE(${pred}, (${p1}));${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_PREDICATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(predicate, args_pp_seq)</displayarguments>
  <fillin>BOOST_REQUIRE_PREDICATE(${pred}, (${p1}));${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_SMALL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(value, tolerance)</displayarguments>
  <fillin>BOOST_WARN_SMALL(${value}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_SMALL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(value, tolerance)</displayarguments>
  <fillin>BOOST_CHECK_SMALL(${value}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_SMALL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(value, tolerance)</displayarguments>
  <fillin>BOOST_REQUIRE_SMALL(${value}, ${tolerance:0.0001});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_IS_DEFINED</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(symbol)</displayarguments>
  <fillin>BOOST_CHECK(BOOST_IS_DEFINED(${symbol}));${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_DONT_PRINT_LOG_VALUE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(the_type)</displayarguments>
  <fillin>BOOST_TEST_DONT_PRINT_LOG_VALUE(${the_type})${cursor}</fillin>
 </item>

 <item>
  <displayprefix>boost &gt; 1.54.0</displayprefix>
  <match>BOOST_TEST_INFO</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(context_descr)</displayarguments>
  <fillin>BOOST_TEST_INFO(${context_descr});${cursor}</fillin>
 </item>
 <item>
  <displayprefix>boost &gt; 1.54.0</displayprefix>
  <match>BOOST_TEST_CONTEXT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(context_descr)</displayarguments>
  <fillin>BOOST_TEST_CONTEXT(${context_descr});${cursor}</fillin>
 </item>

 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_CASE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(function)</displayarguments>
  <fillin>BOOST_TEST_CASE(${function});${cursor}</fillin>
 </item>

 <item>
  <displayprefix></displayprefix>
  <match>BOOST_AUTO_TEST_CASE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(name)</displayarguments>
  <fillin>BOOST_AUTO_TEST_CASE(${name:some}_test)
{${cursor}
}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_AUTO_TEST_CASE_TEMPLATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(test_case_name, formal_type_param_name, collection_of_types)</displayarguments>
  <fillin>BOOST_AUTO_TEST_CASE_TEMPLATE(${test_case_name:Test}, ${formal_type_param_name:T}, ${collection_of_types}) {
  ${cursor}
}</fillin>
 </item>
 <item>
  <displayprefix>manual reg.</displayprefix>
  <match>BOOST_TEST_CASE_TEMPLATE_FUNCTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(test_case_name, type_name)</displayarguments>
  <fillin>BOOST_TEST_CASE_TEMPLATE_FUNCTION(${test_case_name:Test}, ${type_name:T}) {
	${cursor}
}</fillin>
 </item>
 <item>
  <displayprefix>manual reg.</displayprefix>
  <match>BOOST_TEST_CASE_TEMPLATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(test_case_name, collection_of_types)</displayarguments>
  <fillin>BOOST_TEST_CASE_TEMPLATE(${test_case_name:Test}, ${collection_of_types});${cursor}</fillin>
 </item>
 <item>
  <displayprefix>manual reg.</displayprefix>
  <match>BOOST_PARAM_TEST_CASE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(test_function, params_begin, params_end)</displayarguments>
  <fillin>BOOST_PARAM_TEST_CASE(${test_function:Test}, ${params_begin}, ${params_end});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_FIXTURE_TEST_CASE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(test_case_name, fixture_name)</displayarguments>
  <fillin>BOOST_FIXTURE_TEST_CASE(${test_case_name:Test}, ${fixture_name})
{${cursor}
}</fillin>
 </item>
 <item>
  <displayprefix>manual reg.</displayprefix>
  <match>BOOST_TEST_SUITE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(suite_name)</displayarguments>
  <fillin>boost::unit_test::test_suite* ${suite_name} = BOOST_TEST_SUITE(${suite_name});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_AUTO_TEST_SUITE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(test_suite_name)</displayarguments>
  <fillin>BOOST_AUTO_TEST_SUITE(${test_suite_name})
${cursor}
BOOST_AUTO_TEST_SUITE_END()                                 // End of${test_suite_name/^/ /}
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_FIXTURE_TEST_SUITE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(test_suite_name, fixture_name)</displayarguments>
  <fillin>BOOST_FIXTURE_TEST_SUITE(${test_suite_name}, ${fixture_name})
${cursor}
BOOST_AUTO_TEST_SUITE_END()                                 // End of${test_suite_name/^/ /}
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_GLOBAL_FIXTURE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(fixture_name)</displayarguments>
  <fillin>BOOST_GLOBAL_FIXTURE(${fixture_name});${cursor}</fillin>
 </item>

 <item>
  <displayprefix></displayprefix>
  <match>boost::unit_test::unit_test_log.set_stream</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(std::ostream&amp; str)</displayarguments>
  <fillin>boost::unit_test::unit_test_log.set_stream(${stream});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>boost::unit_test::unit_test_log.set_threshold_level</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(boost::unit_test::log_level level), log_debug|log_warning|...</displayarguments>
  <fillin>boost::unit_test::unit_test_log.set_threshold_level(boost::unit_test::${level:log_debug});${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>boost::unit_test::unit_test_log.set_format</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(boost::unit_test::output_format fmt), CLF|XML</displayarguments>
  <fillin>boost::unit_test::unit_test_log.set_format(boost::unit_test::${fmt:XML});${cursor}</fillin>
 </item>

 <item>
  <displayprefix>boost &gt;= 1.59.0</displayprefix>
  <match>BOOST_TEST</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_TEST(${expr});${cursor}</fillin>
 </item>

 <item>
  <displayprefix>boost &gt;= 1.59.0</displayprefix>
  <match>BOOST_DATA_TEST_CASE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(name, samples, var1, ..., varN)</displayarguments>
  <fillin>BOOST_DATA_TEST_CASE(${name}, ${samples}, ${var});${cursor}</fillin>
 </item>

 <item>
  <displayprefix>boost &gt;= 1.59.0</displayprefix>
  <match>BOOST_TEST_DECORATOR(*decorator)</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(decorator)</displayarguments>
  <fillin>BOOST_TEST_DECORATOR(*${decorator})${cursor}</fillin>
 </item>

</snippets>
<!-- kate: indent-width 2; tab-width 2; -->
