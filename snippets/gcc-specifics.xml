<snippets
    namespace="gcc:"
    license="GPL"
    filetypes="C++;C++11;C++11/Qt4"
    snippetlicense="public domain"
    authors="Alex Turbov &lt;I.zaufi@gmail.com&gt;"
    name="gcc predefined macros, builtins, attributes and pragmas"
  >
  <!-- Predefined GCC stuff version 1.2 -->
  <item><match>__3dNOW_A__</match><fillin>__3dNOW_A__</fillin></item>
  <item><match>__3dNOW__</match><fillin>__3dNOW__</fillin></item>
  <item><match>__ABM__</match><fillin>__ABM__</fillin></item>
  <item><match>__ADX__</match><fillin>__ADX__</fillin></item>
  <item><match>__AES__</match><fillin>__AES__</fillin></item>
  <item><match>__amd64</match><fillin>__amd64</fillin></item>
  <item><match>__amd64__</match><fillin>__amd64__</fillin></item>
  <item><match>__amdfam10</match><fillin>__amdfam10</fillin></item>
  <item><match>__amdfam10__</match><fillin>__amdfam10__</fillin></item>
  <item><match>__athlon</match><fillin>__athlon</fillin></item>
  <item><match>__athlon__</match><fillin>__athlon__</fillin></item>
  <item><match>__athlon_sse__</match><fillin>__athlon_sse__</fillin></item>
  <item><match>__ATOMIC_ACQ_REL</match><fillin>__ATOMIC_ACQ_REL</fillin></item>
  <item><match>__ATOMIC_ACQUIRE</match><fillin>__ATOMIC_ACQUIRE</fillin></item>
  <item><match>__ATOMIC_CONSUME</match><fillin>__ATOMIC_CONSUME</fillin></item>
  <item><match>__ATOMIC_HLE_ACQUIRE</match><fillin>__ATOMIC_HLE_ACQUIRE</fillin></item>
  <item><match>__ATOMIC_HLE_RELEASE</match><fillin>__ATOMIC_HLE_RELEASE</fillin></item>
  <item><match>__ATOMIC_RELAXED</match><fillin>__ATOMIC_RELAXED</fillin></item>
  <item><match>__ATOMIC_RELEASE</match><fillin>__ATOMIC_RELEASE</fillin></item>
  <item><match>__ATOMIC_SEQ_CST</match><fillin>__ATOMIC_SEQ_CST</fillin></item>
  <item><match>__atom</match><fillin>__atom</fillin></item>
  <item><match>__atom__</match><fillin>__atom__</fillin></item>
  <item><match>__AVX2__</match><fillin>__AVX2__</fillin></item>
  <item><match>__AVX512CD__</match><fillin>__AVX512CD__</fillin></item>
  <item><match>__AVX512ER__</match><fillin>__AVX512ER__</fillin></item>
  <item><match>__AVX512F__</match><fillin>__AVX512F__</fillin></item>
  <item><match>__AVX512PF__</match><fillin>__AVX512PF__</fillin></item>
  <item><match>__AVX__</match><fillin>__AVX__</fillin></item>
  <item><match>__BASE_FILE__</match><fillin>__BASE_FILE__</fillin></item>
  <item><match>__bdver1</match><fillin>__bdver1</fillin></item>
  <item><match>__bdver1__</match><fillin>__bdver1__</fillin></item>
  <item><match>__bdver2</match><fillin>__bdver2</fillin></item>
  <item><match>__bdver2__</match><fillin>__bdver2__</fillin></item>
  <item><match>__bdver3</match><fillin>__bdver3</fillin></item>
  <item><match>__bdver3__</match><fillin>__bdver3__</fillin></item>
  <item><match>__bdver4</match><fillin>__bdver4</fillin></item>
  <item><match>__bdver4__</match><fillin>__bdver4__</fillin></item>
  <item><match>__BIGGEST_ALIGNMENT__</match><fillin>__BIGGEST_ALIGNMENT__</fillin></item>
  <item><match>__BMI2__</match><fillin>__BMI2__</fillin></item>
  <item><match>__BMI__</match><fillin>__BMI__</fillin></item>
  <item><match>__bonnell</match><fillin>__bonnell</fillin></item>
  <item><match>__bonnell__</match><fillin>__bonnell__</fillin></item>
  <item><match>__btver1</match><fillin>__btver1</fillin></item>
  <item><match>__btver1__</match><fillin>__btver1__</fillin></item>
  <item><match>__btver2</match><fillin>__btver2</fillin></item>
  <item><match>__btver2__</match><fillin>__btver2__</fillin></item>
  <item><match>__BYTE_ORDER__</match><fillin>__BYTE_ORDER__</fillin></item>
  <item><match>__CHAR16_TYPE__</match><fillin>__CHAR16_TYPE__</fillin></item>
  <item><match>__CHAR32_TYPE__</match><fillin>__CHAR32_TYPE__</fillin></item>
  <item><match>__CHAR_BIT__</match><fillin>__CHAR_BIT__</fillin></item>
  <item><match>__CHAR_UNSIGNED__</match><fillin>__CHAR_UNSIGNED__</fillin></item>
  <item><match>__cilk</match><fillin>__cilk</fillin></item>
  <item><match>__code_model_32__</match><fillin>__code_model_32__</fillin></item>
  <item><match>__code_model_small__</match><fillin>__code_model_small__</fillin></item>
  <item><match>__core2</match><fillin>__core2</fillin></item>
  <item><match>__core2__</match><fillin>__core2__</fillin></item>
  <item><match>__core_avx2</match><fillin>__core_avx2</fillin></item>
  <item><match>__core_avx2__</match><fillin>__core_avx2__</fillin></item>
  <item><match>__corei7_avx</match><fillin>__corei7_avx</fillin></item>
  <item><match>__corei7_avx__</match><fillin>__corei7_avx__</fillin></item>
  <item><match>__corei7</match><fillin>__corei7</fillin></item>
  <item><match>__corei7__</match><fillin>__corei7__</fillin></item>
  <item><match>__COUNTER__</match><fillin>__COUNTER__</fillin></item>
  <item><match>__cplusplus</match><fillin>__cplusplus</fillin></item>
  <item><match>__DBL_DECIMAL_DIG__</match><fillin>__DBL_DECIMAL_DIG__</fillin></item>
  <item><match>__DBL_DENORM_MIN__</match><fillin>__DBL_DENORM_MIN__</fillin></item>
  <item><match>__DBL_DIG__</match><fillin>__DBL_DIG__</fillin></item>
  <item><match>__DBL_EPSILON__</match><fillin>__DBL_EPSILON__</fillin></item>
  <item><match>__DBL_HAS_DENORM__</match><fillin>__DBL_HAS_DENORM__</fillin></item>
  <item><match>__DBL_HAS_INFINITY__</match><fillin>__DBL_HAS_INFINITY__</fillin></item>
  <item><match>__DBL_HAS_QUIET_NAN__</match><fillin>__DBL_HAS_QUIET_NAN__</fillin></item>
  <item><match>__DBL_MANT_DIG__</match><fillin>__DBL_MANT_DIG__</fillin></item>
  <item><match>__DBL_MAX_10_EXP__</match><fillin>__DBL_MAX_10_EXP__</fillin></item>
  <item><match>__DBL_MAX_EXP__</match><fillin>__DBL_MAX_EXP__</fillin></item>
  <item><match>__DBL_MAX__</match><fillin>__DBL_MAX__</fillin></item>
  <item><match>__DBL_MIN_10_EXP__</match><fillin>__DBL_MIN_10_EXP__</fillin></item>
  <item><match>__DBL_MIN_EXP__</match><fillin>__DBL_MIN_EXP__</fillin></item>
  <item><match>__DBL_MIN__</match><fillin>__DBL_MIN__</fillin></item>
  <item><match>__DEC128_EPSILON__</match><fillin>__DEC128_EPSILON__</fillin></item>
  <item><match>__DEC128_MANT_DIG__</match><fillin>__DEC128_MANT_DIG__</fillin></item>
  <item><match>__DEC128_MAX_EXP__</match><fillin>__DEC128_MAX_EXP__</fillin></item>
  <item><match>__DEC128_MAX__</match><fillin>__DEC128_MAX__</fillin></item>
  <item><match>__DEC128_MIN_EXP__</match><fillin>__DEC128_MIN_EXP__</fillin></item>
  <item><match>__DEC128_MIN__</match><fillin>__DEC128_MIN__</fillin></item>
  <item><match>__DEC128_SUBNORMAL_MIN__</match><fillin>__DEC128_SUBNORMAL_MIN__</fillin></item>
  <item><match>__DEC32_EPSILON__</match><fillin>__DEC32_EPSILON__</fillin></item>
  <item><match>__DEC32_MANT_DIG__</match><fillin>__DEC32_MANT_DIG__</fillin></item>
  <item><match>__DEC32_MAX_EXP__</match><fillin>__DEC32_MAX_EXP__</fillin></item>
  <item><match>__DEC32_MAX__</match><fillin>__DEC32_MAX__</fillin></item>
  <item><match>__DEC32_MIN_EXP__</match><fillin>__DEC32_MIN_EXP__</fillin></item>
  <item><match>__DEC32_MIN__</match><fillin>__DEC32_MIN__</fillin></item>
  <item><match>__DEC32_SUBNORMAL_MIN__</match><fillin>__DEC32_SUBNORMAL_MIN__</fillin></item>
  <item><match>__DEC64_EPSILON__</match><fillin>__DEC64_EPSILON__</fillin></item>
  <item><match>__DEC64_MANT_DIG__</match><fillin>__DEC64_MANT_DIG__</fillin></item>
  <item><match>__DEC64_MAX_EXP__</match><fillin>__DEC64_MAX_EXP__</fillin></item>
  <item><match>__DEC64_MAX__</match><fillin>__DEC64_MAX__</fillin></item>
  <item><match>__DEC64_MIN_EXP__</match><fillin>__DEC64_MIN_EXP__</fillin></item>
  <item><match>__DEC64_MIN__</match><fillin>__DEC64_MIN__</fillin></item>
  <item><match>__DEC64_SUBNORMAL_MIN__</match><fillin>__DEC64_SUBNORMAL_MIN__</fillin></item>
  <item><match>__DEC_EVAL_METHOD__</match><fillin>__DEC_EVAL_METHOD__</fillin></item>
  <item><match>__DECIMAL_BID_FORMAT__</match><fillin>__DECIMAL_BID_FORMAT__</fillin></item>
  <item><match>__DECIMAL_DIG__</match><fillin>__DECIMAL_DIG__</fillin></item>
  <item><match>__DEPRECATED</match><fillin>__DEPRECATED</fillin></item>
  <item><match>__ELF__</match><fillin>__ELF__</fillin></item>
  <item><match>__EXCEPTIONS</match><fillin>__EXCEPTIONS</fillin></item>
  <item><match>__F16C__</match><fillin>__F16C__</fillin></item>
  <item><match>__FAST_MATH__</match><fillin>__FAST_MATH__</fillin></item>
  <item><match>__FINITE_MATH_ONLY__</match><fillin>__FINITE_MATH_ONLY__</fillin></item>
  <item><match>__FLOAT_WORD_ORDER__</match><fillin>__FLOAT_WORD_ORDER__</fillin></item>
  <item><match>__FLT_DECIMAL_DIG__</match><fillin>__FLT_DECIMAL_DIG__</fillin></item>
  <item><match>__FLT_DENORM_MIN__</match><fillin>__FLT_DENORM_MIN__</fillin></item>
  <item><match>__FLT_DIG__</match><fillin>__FLT_DIG__</fillin></item>
  <item><match>__FLT_EPSILON__</match><fillin>__FLT_EPSILON__</fillin></item>
  <item><match>__FLT_EVAL_METHOD__</match><fillin>__FLT_EVAL_METHOD__</fillin></item>
  <item><match>__FLT_HAS_DENORM__</match><fillin>__FLT_HAS_DENORM__</fillin></item>
  <item><match>__FLT_HAS_INFINITY__</match><fillin>__FLT_HAS_INFINITY__</fillin></item>
  <item><match>__FLT_HAS_QUIET_NAN__</match><fillin>__FLT_HAS_QUIET_NAN__</fillin></item>
  <item><match>__FLT_MANT_DIG__</match><fillin>__FLT_MANT_DIG__</fillin></item>
  <item><match>__FLT_MAX_10_EXP__</match><fillin>__FLT_MAX_10_EXP__</fillin></item>
  <item><match>__FLT_MAX_EXP__</match><fillin>__FLT_MAX_EXP__</fillin></item>
  <item><match>__FLT_MAX__</match><fillin>__FLT_MAX__</fillin></item>
  <item><match>__FLT_MIN_10_EXP__</match><fillin>__FLT_MIN_10_EXP__</fillin></item>
  <item><match>__FLT_MIN_EXP__</match><fillin>__FLT_MIN_EXP__</fillin></item>
  <item><match>__FLT_MIN__</match><fillin>__FLT_MIN__</fillin></item>
  <item><match>__FLT_RADIX__</match><fillin>__FLT_RADIX__</fillin></item>
  <item><match>__FMA4__</match><fillin>__FMA4__</fillin></item>
  <item><match>__FMA__</match><fillin>__FMA__</fillin></item>
  <item><match>_FORTIFY_SOURCE</match><fillin>_FORTIFY_SOURCE</fillin></item>
  <item><match>__FP_FAST_FMAF</match><fillin>__FP_FAST_FMAF</fillin></item>
  <item><match>__FP_FAST_FMA</match><fillin>__FP_FAST_FMA</fillin></item>
  <item><match>__FSGSBASE__</match><fillin>__FSGSBASE__</fillin></item>
  <item><match>__FUNCTION__</match><fillin>__FUNCTION__</fillin></item>
  <item><match>__FXSR__</match><fillin>__FXSR__</fillin></item>
  <item><match>__GCC_ATOMIC_BOOL_LOCK_FREE</match><fillin>__GCC_ATOMIC_BOOL_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_CHAR16_T_LOCK_FREE</match><fillin>__GCC_ATOMIC_CHAR16_T_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_CHAR32_T_LOCK_FREE</match><fillin>__GCC_ATOMIC_CHAR32_T_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_CHAR_LOCK_FREE</match><fillin>__GCC_ATOMIC_CHAR_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_INT_LOCK_FREE</match><fillin>__GCC_ATOMIC_INT_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_LLONG_LOCK_FREE</match><fillin>__GCC_ATOMIC_LLONG_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_LONG_LOCK_FREE</match><fillin>__GCC_ATOMIC_LONG_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_POINTER_LOCK_FREE</match><fillin>__GCC_ATOMIC_POINTER_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_SHORT_LOCK_FREE</match><fillin>__GCC_ATOMIC_SHORT_LOCK_FREE</fillin></item>
  <item><match>__GCC_ATOMIC_TEST_AND_SET_TRUEVAL</match><fillin>__GCC_ATOMIC_TEST_AND_SET_TRUEVAL</fillin></item>
  <item><match>__GCC_ATOMIC_WCHAR_T_LOCK_FREE</match><fillin>__GCC_ATOMIC_WCHAR_T_LOCK_FREE</fillin></item>
  <item><match>__GCC_HAVE_DWARF2_CFI_ASM</match><fillin>__GCC_HAVE_DWARF2_CFI_ASM</fillin></item>
  <item><match>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16</match><fillin>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16</fillin></item>
  <item><match>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1</match><fillin>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1</fillin></item>
  <item><match>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2</match><fillin>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2</fillin></item>
  <item><match>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4</match><fillin>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4</fillin></item>
  <item><match>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8</match><fillin>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8</fillin></item>
  <item><match>__GCC_IEC_559_COMPLEX</match><fillin>__GCC_IEC_559_COMPLEX</fillin></item>
  <item><match>__GCC_IEC_559</match><fillin>__GCC_IEC_559</fillin></item>
  <item><match>__geode</match><fillin>__geode</fillin></item>
  <item><match>__geode__</match><fillin>__geode__</fillin></item>
  <item><match>__GFORTRAN__</match><fillin>__GFORTRAN__</fillin></item>
  <item><match>__GNUC_GNU_INLINE__</match><fillin>__GNUC_GNU_INLINE__</fillin></item>
  <item><match>__GNUC__</match><fillin>__GNUC__</fillin></item>
  <item><match>__GNUC_MINOR__</match><fillin>__GNUC_MINOR__</fillin></item>
  <item><match>__GNUC_PATCHLEVEL__</match><fillin>__GNUC_PATCHLEVEL__</fillin></item>
  <item><match>__GNUC_STDC_INLINE__</match><fillin>__GNUC_STDC_INLINE__</fillin></item>
  <item><match>__GNUG__</match><fillin>__GNUG__</fillin></item>
  <item><match>__gnu_linux__</match><fillin>__gnu_linux__</fillin></item>
  <item><match>_GNU_SOURCE</match><fillin>_GNU_SOURCE</fillin></item>
  <item><match>__GXX_ABI_VERSION</match><fillin>__GXX_ABI_VERSION</fillin></item>
  <item><match>__GXX_EXPERIMENTAL_CXX0X__</match><fillin>__GXX_EXPERIMENTAL_CXX0X__</fillin></item>
  <item><match>__GXX_RTTI</match><fillin>__GXX_RTTI</fillin></item>
  <item><match>__GXX_WEAK__</match><fillin>__GXX_WEAK__</fillin></item>
  <item><match>__haswell</match><fillin>__haswell</fillin></item>
  <item><match>__haswell__</match><fillin>__haswell__</fillin></item>
  <item><match>__i386</match><fillin>__i386</fillin></item>
  <item><match>__i386__</match><fillin>__i386__</fillin></item>
  <item><match>i386</match><fillin>i386</fillin></item>
  <item><match>__i486</match><fillin>__i486</fillin></item>
  <item><match>__i486__</match><fillin>__i486__</fillin></item>
  <item><match>__i586</match><fillin>__i586</fillin></item>
  <item><match>__i586__</match><fillin>__i586__</fillin></item>
  <item><match>__i686</match><fillin>__i686</fillin></item>
  <item><match>__i686__</match><fillin>__i686__</fillin></item>
  <item><match>__ILP32__</match><fillin>__ILP32__</fillin></item>
  <item><match>_ILP32</match><fillin>_ILP32</fillin></item>
  <item><match>__INCLUDE_LEVEL__</match><fillin>__INCLUDE_LEVEL__</fillin></item>
  <item><match>__INT16_C</match><fillin>__INT16_C</fillin></item>
  <item><match>__INT16_MAX__</match><fillin>__INT16_MAX__</fillin></item>
  <item><match>__INT16_TYPE__</match><fillin>__INT16_TYPE__</fillin></item>
  <item><match>__INT32_C</match><fillin>__INT32_C</fillin></item>
  <item><match>__INT32_MAX__</match><fillin>__INT32_MAX__</fillin></item>
  <item><match>__INT32_TYPE__</match><fillin>__INT32_TYPE__</fillin></item>
  <item><match>__INT64_C</match><fillin>__INT64_C</fillin></item>
  <item><match>__INT64_MAX__</match><fillin>__INT64_MAX__</fillin></item>
  <item><match>__INT64_TYPE__</match><fillin>__INT64_TYPE__</fillin></item>
  <item><match>__INT8_C</match><fillin>__INT8_C</fillin></item>
  <item><match>__INT8_MAX__</match><fillin>__INT8_MAX__</fillin></item>
  <item><match>__INT8_TYPE__</match><fillin>__INT8_TYPE__</fillin></item>
  <item><match>__INT_FAST16_MAX__</match><fillin>__INT_FAST16_MAX__</fillin></item>
  <item><match>__INT_FAST16_TYPE__</match><fillin>__INT_FAST16_TYPE__</fillin></item>
  <item><match>__INT_FAST32_MAX__</match><fillin>__INT_FAST32_MAX__</fillin></item>
  <item><match>__INT_FAST32_TYPE__</match><fillin>__INT_FAST32_TYPE__</fillin></item>
  <item><match>__INT_FAST64_MAX__</match><fillin>__INT_FAST64_MAX__</fillin></item>
  <item><match>__INT_FAST64_TYPE__</match><fillin>__INT_FAST64_TYPE__</fillin></item>
  <item><match>__INT_FAST8_MAX__</match><fillin>__INT_FAST8_MAX__</fillin></item>
  <item><match>__INT_FAST8_TYPE__</match><fillin>__INT_FAST8_TYPE__</fillin></item>
  <item><match>__INT_LEAST16_MAX__</match><fillin>__INT_LEAST16_MAX__</fillin></item>
  <item><match>__INT_LEAST16_TYPE__</match><fillin>__INT_LEAST16_TYPE__</fillin></item>
  <item><match>__INT_LEAST32_MAX__</match><fillin>__INT_LEAST32_MAX__</fillin></item>
  <item><match>__INT_LEAST32_TYPE__</match><fillin>__INT_LEAST32_TYPE__</fillin></item>
  <item><match>__INT_LEAST64_MAX__</match><fillin>__INT_LEAST64_MAX__</fillin></item>
  <item><match>__INT_LEAST64_TYPE__</match><fillin>__INT_LEAST64_TYPE__</fillin></item>
  <item><match>__INT_LEAST8_MAX__</match><fillin>__INT_LEAST8_MAX__</fillin></item>
  <item><match>__INT_LEAST8_TYPE__</match><fillin>__INT_LEAST8_TYPE__</fillin></item>
  <item><match>__INTMAX_C</match><fillin>__INTMAX_C</fillin></item>
  <item><match>__INT_MAX__</match><fillin>__INT_MAX__</fillin></item>
  <item><match>__INTMAX_MAX__</match><fillin>__INTMAX_MAX__</fillin></item>
  <item><match>__INTMAX_TYPE__</match><fillin>__INTMAX_TYPE__</fillin></item>
  <item><match>__INTPTR_MAX__</match><fillin>__INTPTR_MAX__</fillin></item>
  <item><match>__INTPTR_TYPE__</match><fillin>__INTPTR_TYPE__</fillin></item>
  <item><match>__k6_2__</match><fillin>__k6_2__</fillin></item>
  <item><match>__k6_3__</match><fillin>__k6_3__</fillin></item>
  <item><match>__k6</match><fillin>__k6</fillin></item>
  <item><match>__k6__</match><fillin>__k6__</fillin></item>
  <item><match>__k8</match><fillin>__k8</fillin></item>
  <item><match>__k8__</match><fillin>__k8__</fillin></item>
  <item><match>__LDBL_DENORM_MIN__</match><fillin>__LDBL_DENORM_MIN__</fillin></item>
  <item><match>__LDBL_DIG__</match><fillin>__LDBL_DIG__</fillin></item>
  <item><match>__LDBL_EPSILON__</match><fillin>__LDBL_EPSILON__</fillin></item>
  <item><match>__LDBL_HAS_DENORM__</match><fillin>__LDBL_HAS_DENORM__</fillin></item>
  <item><match>__LDBL_HAS_INFINITY__</match><fillin>__LDBL_HAS_INFINITY__</fillin></item>
  <item><match>__LDBL_HAS_QUIET_NAN__</match><fillin>__LDBL_HAS_QUIET_NAN__</fillin></item>
  <item><match>__LDBL_MANT_DIG__</match><fillin>__LDBL_MANT_DIG__</fillin></item>
  <item><match>__LDBL_MAX_10_EXP__</match><fillin>__LDBL_MAX_10_EXP__</fillin></item>
  <item><match>__LDBL_MAX_EXP__</match><fillin>__LDBL_MAX_EXP__</fillin></item>
  <item><match>__LDBL_MAX__</match><fillin>__LDBL_MAX__</fillin></item>
  <item><match>__LDBL_MIN_10_EXP__</match><fillin>__LDBL_MIN_10_EXP__</fillin></item>
  <item><match>__LDBL_MIN_EXP__</match><fillin>__LDBL_MIN_EXP__</fillin></item>
  <item><match>__LDBL_MIN__</match><fillin>__LDBL_MIN__</fillin></item>
  <item><match>__linux</match><fillin>__linux</fillin></item>
  <item><match>__linux__</match><fillin>__linux__</fillin></item>
  <item><match>linux</match><fillin>linux</fillin></item>
  <item><match>__LONG_LONG_MAX__</match><fillin>__LONG_LONG_MAX__</fillin></item>
  <item><match>__LONG_MAX__</match><fillin>__LONG_MAX__</fillin></item>
  <item><match>__LP64__</match><fillin>__LP64__</fillin></item>
  <item><match>_LP64</match><fillin>_LP64</fillin></item>
  <item><match>__LWP__</match><fillin>__LWP__</fillin></item>
  <item><match>__LZCNT__</match><fillin>__LZCNT__</fillin></item>
  <item><match>__MMX__</match><fillin>__MMX__</fillin></item>
  <item><match>__nehalem</match><fillin>__nehalem</fillin></item>
  <item><match>__nehalem__</match><fillin>__nehalem__</fillin></item>
  <item><match>__NEXT_RUNTIME__</match><fillin>__NEXT_RUNTIME__</fillin></item>
  <item><match>__nocona</match><fillin>__nocona</fillin></item>
  <item><match>__nocona__</match><fillin>__nocona__</fillin></item>
  <item><match>__NO_INLINE__</match><fillin>__NO_INLINE__</fillin></item>
  <item><match>__OPTIMIZE__</match><fillin>__OPTIMIZE__</fillin></item>
  <item><match>__OPTIMIZE_SIZE__</match><fillin>__OPTIMIZE_SIZE__</fillin></item>
  <item><match>__ORDER_BIG_ENDIAN__</match><fillin>__ORDER_BIG_ENDIAN__</fillin></item>
  <item><match>__ORDER_LITTLE_ENDIAN__</match><fillin>__ORDER_LITTLE_ENDIAN__</fillin></item>
  <item><match>__ORDER_PDP_ENDIAN__</match><fillin>__ORDER_PDP_ENDIAN__</fillin></item>
  <item><match>__PCLMUL__</match><fillin>__PCLMUL__</fillin></item>
  <item><match>__pentium4</match><fillin>__pentium4</fillin></item>
  <item><match>__pentium4__</match><fillin>__pentium4__</fillin></item>
  <item><match>__pentium</match><fillin>__pentium</fillin></item>
  <item><match>__pentium__</match><fillin>__pentium__</fillin></item>
  <item><match>__pentium_mmx__</match><fillin>__pentium_mmx__</fillin></item>
  <item><match>__pentiumpro</match><fillin>__pentiumpro</fillin></item>
  <item><match>__pentiumpro__</match><fillin>__pentiumpro__</fillin></item>
  <item><match>__pic__</match><fillin>__pic__</fillin></item>
  <item><match>__PIC__</match><fillin>__PIC__</fillin></item>
  <item><match>__pie__</match><fillin>__pie__</fillin></item>
  <item><match>__PIE__</match><fillin>__PIE__</fillin></item>
  <item><match>__POPCNT__</match><fillin>__POPCNT__</fillin></item>
  <item><match>__PRAGMA_REDEFINE_EXTNAME</match><fillin>__PRAGMA_REDEFINE_EXTNAME</fillin></item>
  <item><match>__PRETTY_FUNCTION__</match><fillin>__PRETTY_FUNCTION__</fillin></item>
  <item><match>__PRFCHW__</match><fillin>__PRFCHW__</fillin></item>
  <item><match>__PTRDIFF_MAX__</match><fillin>__PTRDIFF_MAX__</fillin></item>
  <item><match>__PTRDIFF_TYPE__</match><fillin>__PTRDIFF_TYPE__</fillin></item>
  <item><match>__RDRND__</match><fillin>__RDRND__</fillin></item>
  <item><match>__RDSEED__</match><fillin>__RDSEED__</fillin></item>
  <item><match>_REENTRANT</match><fillin>_REENTRANT</fillin></item>
  <item><match>__REGISTER_PREFIX__</match><fillin>__REGISTER_PREFIX__</fillin></item>
  <item><match>__RTM__</match><fillin>__RTM__</fillin></item>
  <item><match>__sandybridge</match><fillin>__sandybridge</fillin></item>
  <item><match>__sandybridge__</match><fillin>__sandybridge__</fillin></item>
  <item><match>__SANITIZE_ADDRESS__</match><fillin>__SANITIZE_ADDRESS__</fillin></item>
  <item><match>__SCHAR_MAX__</match><fillin>__SCHAR_MAX__</fillin></item>
  <item><match>__SHRT_MAX__</match><fillin>__SHRT_MAX__</fillin></item>
  <item><match>__SIG_ATOMIC_MAX__</match><fillin>__SIG_ATOMIC_MAX__</fillin></item>
  <item><match>__SIG_ATOMIC_MIN__</match><fillin>__SIG_ATOMIC_MIN__</fillin></item>
  <item><match>__SIG_ATOMIC_TYPE__</match><fillin>__SIG_ATOMIC_TYPE__</fillin></item>
  <item><match>__silvermont</match><fillin>__silvermont</fillin></item>
  <item><match>__silvermont__</match><fillin>__silvermont__</fillin></item>
  <item><match>__SIZE_MAX__</match><fillin>__SIZE_MAX__</fillin></item>
  <item><match>__SIZEOF_DOUBLE__</match><fillin>__SIZEOF_DOUBLE__</fillin></item>
  <item><match>__SIZEOF_FLOAT__</match><fillin>__SIZEOF_FLOAT__</fillin></item>
  <item><match>__SIZEOF_INT128__</match><fillin>__SIZEOF_INT128__</fillin></item>
  <item><match>__SIZEOF_INT__</match><fillin>__SIZEOF_INT__</fillin></item>
  <item><match>__SIZEOF_LONG_DOUBLE__</match><fillin>__SIZEOF_LONG_DOUBLE__</fillin></item>
  <item><match>__SIZEOF_LONG__</match><fillin>__SIZEOF_LONG__</fillin></item>
  <item><match>__SIZEOF_LONG_LONG__</match><fillin>__SIZEOF_LONG_LONG__</fillin></item>
  <item><match>__SIZEOF_POINTER__</match><fillin>__SIZEOF_POINTER__</fillin></item>
  <item><match>__SIZEOF_PTRDIFF_T__</match><fillin>__SIZEOF_PTRDIFF_T__</fillin></item>
  <item><match>__SIZEOF_SHORT__</match><fillin>__SIZEOF_SHORT__</fillin></item>
  <item><match>__SIZEOF_SIZE_T__</match><fillin>__SIZEOF_SIZE_T__</fillin></item>
  <item><match>__SIZEOF_WCHAR_T__</match><fillin>__SIZEOF_WCHAR_T__</fillin></item>
  <item><match>__SIZEOF_WINT_T__</match><fillin>__SIZEOF_WINT_T__</fillin></item>
  <item><match>__SIZE_TYPE__</match><fillin>__SIZE_TYPE__</fillin></item>
  <item><match>__slm</match><fillin>__slm</fillin></item>
  <item><match>__slm__</match><fillin>__slm__</fillin></item>
  <item><match>__SSE2__</match><fillin>__SSE2__</fillin></item>
  <item><match>__SSE2_MATH__</match><fillin>__SSE2_MATH__</fillin></item>
  <item><match>__SSE3__</match><fillin>__SSE3__</fillin></item>
  <item><match>__SSE4_1__</match><fillin>__SSE4_1__</fillin></item>
  <item><match>__SSE4_2__</match><fillin>__SSE4_2__</fillin></item>
  <item><match>__SSE4A__</match><fillin>__SSE4A__</fillin></item>
  <item><match>__SSE__</match><fillin>__SSE__</fillin></item>
  <item><match>__SSE_MATH__</match><fillin>__SSE_MATH__</fillin></item>
  <item><match>__SSP_ALL__</match><fillin>__SSP_ALL__</fillin></item>
  <item><match>__SSP__</match><fillin>__SSP__</fillin></item>
  <item><match>__SSP_STRONG__</match><fillin>__SSP_STRONG__</fillin></item>
  <item><match>__SSSE3__</match><fillin>__SSSE3__</fillin></item>
  <item><match>__STDC_HOSTED__</match><fillin>__STDC_HOSTED__</fillin></item>
  <item><match>__STDC_IEC_559_COMPLEX__</match><fillin>__STDC_IEC_559_COMPLEX__</fillin></item>
  <item><match>__STDC_IEC_559__</match><fillin>__STDC_IEC_559__</fillin></item>
  <item><match>__STDC_ISO_10646__</match><fillin>__STDC_ISO_10646__</fillin></item>
  <item><match>__STDC__</match><fillin>__STDC__</fillin></item>
  <item><match>__STDC_NO_THREADS__</match><fillin>__STDC_NO_THREADS__</fillin></item>
  <item><match>_STDC_PREDEF_H</match><fillin>_STDC_PREDEF_H</fillin></item>
  <item><match>__STDC_UTF_16__</match><fillin>__STDC_UTF_16__</fillin></item>
  <item><match>__STDC_UTF_32__</match><fillin>__STDC_UTF_32__</fillin></item>
  <item><match>__STDC_VERSION__</match><fillin>__STDC_VERSION__</fillin></item>
  <item><match>__STRICT_ANSI__</match><fillin>__STRICT_ANSI__</fillin></item>
  <item><match>__TBM__</match><fillin>__TBM__</fillin></item>
  <item><match>__TIMESTAMP__</match><fillin>__TIMESTAMP__</fillin></item>
  <item><match>__tune_amdfam10__</match><fillin>__tune_amdfam10__</fillin></item>
  <item><match>__tune_athlon__</match><fillin>__tune_athlon__</fillin></item>
  <item><match>__tune_athlon_sse__</match><fillin>__tune_athlon_sse__</fillin></item>
  <item><match>__tune_atom__</match><fillin>__tune_atom__</fillin></item>
  <item><match>__tune_bdver1__</match><fillin>__tune_bdver1__</fillin></item>
  <item><match>__tune_bdver2__</match><fillin>__tune_bdver2__</fillin></item>
  <item><match>__tune_bdver3__</match><fillin>__tune_bdver3__</fillin></item>
  <item><match>__tune_bdver4__</match><fillin>__tune_bdver4__</fillin></item>
  <item><match>__tune_bonnell__</match><fillin>__tune_bonnell__</fillin></item>
  <item><match>__tune_btver1__</match><fillin>__tune_btver1__</fillin></item>
  <item><match>__tune_btver2__</match><fillin>__tune_btver2__</fillin></item>
  <item><match>__tune_core2__</match><fillin>__tune_core2__</fillin></item>
  <item><match>__tune_core_avx2__</match><fillin>__tune_core_avx2__</fillin></item>
  <item><match>__tune_corei7_avx__</match><fillin>__tune_corei7_avx__</fillin></item>
  <item><match>__tune_corei7__</match><fillin>__tune_corei7__</fillin></item>
  <item><match>__tune_geode__</match><fillin>__tune_geode__</fillin></item>
  <item><match>__tune_haswell__</match><fillin>__tune_haswell__</fillin></item>
  <item><match>__tune_i386__</match><fillin>__tune_i386__</fillin></item>
  <item><match>__tune_i486__</match><fillin>__tune_i486__</fillin></item>
  <item><match>__tune_i586__</match><fillin>__tune_i586__</fillin></item>
  <item><match>__tune_i686__</match><fillin>__tune_i686__</fillin></item>
  <item><match>__tune_k6_2__</match><fillin>__tune_k6_2__</fillin></item>
  <item><match>__tune_k6_3__</match><fillin>__tune_k6_3__</fillin></item>
  <item><match>__tune_k6__</match><fillin>__tune_k6__</fillin></item>
  <item><match>__tune_k8__</match><fillin>__tune_k8__</fillin></item>
  <item><match>__tune_nehalem__</match><fillin>__tune_nehalem__</fillin></item>
  <item><match>__tune_nocona__</match><fillin>__tune_nocona__</fillin></item>
  <item><match>__tune_pentium2__</match><fillin>__tune_pentium2__</fillin></item>
  <item><match>__tune_pentium3__</match><fillin>__tune_pentium3__</fillin></item>
  <item><match>__tune_pentium4__</match><fillin>__tune_pentium4__</fillin></item>
  <item><match>__tune_pentium__</match><fillin>__tune_pentium__</fillin></item>
  <item><match>__tune_pentium_mmx__</match><fillin>__tune_pentium_mmx__</fillin></item>
  <item><match>__tune_pentiumpro__</match><fillin>__tune_pentiumpro__</fillin></item>
  <item><match>__tune_sandybridge__</match><fillin>__tune_sandybridge__</fillin></item>
  <item><match>__tune_silvermont__</match><fillin>__tune_silvermont__</fillin></item>
  <item><match>__tune_slm__</match><fillin>__tune_slm__</fillin></item>
  <item><match>__UINT16_C</match><fillin>__UINT16_C</fillin></item>
  <item><match>__UINT16_MAX__</match><fillin>__UINT16_MAX__</fillin></item>
  <item><match>__UINT16_TYPE__</match><fillin>__UINT16_TYPE__</fillin></item>
  <item><match>__UINT32_C</match><fillin>__UINT32_C</fillin></item>
  <item><match>__UINT32_MAX__</match><fillin>__UINT32_MAX__</fillin></item>
  <item><match>__UINT32_TYPE__</match><fillin>__UINT32_TYPE__</fillin></item>
  <item><match>__UINT64_C</match><fillin>__UINT64_C</fillin></item>
  <item><match>__UINT64_MAX__</match><fillin>__UINT64_MAX__</fillin></item>
  <item><match>__UINT64_TYPE__</match><fillin>__UINT64_TYPE__</fillin></item>
  <item><match>__UINT8_C</match><fillin>__UINT8_C</fillin></item>
  <item><match>__UINT8_MAX__</match><fillin>__UINT8_MAX__</fillin></item>
  <item><match>__UINT8_TYPE__</match><fillin>__UINT8_TYPE__</fillin></item>
  <item><match>__UINT_FAST16_MAX__</match><fillin>__UINT_FAST16_MAX__</fillin></item>
  <item><match>__UINT_FAST16_TYPE__</match><fillin>__UINT_FAST16_TYPE__</fillin></item>
  <item><match>__UINT_FAST32_MAX__</match><fillin>__UINT_FAST32_MAX__</fillin></item>
  <item><match>__UINT_FAST32_TYPE__</match><fillin>__UINT_FAST32_TYPE__</fillin></item>
  <item><match>__UINT_FAST64_MAX__</match><fillin>__UINT_FAST64_MAX__</fillin></item>
  <item><match>__UINT_FAST64_TYPE__</match><fillin>__UINT_FAST64_TYPE__</fillin></item>
  <item><match>__UINT_FAST8_MAX__</match><fillin>__UINT_FAST8_MAX__</fillin></item>
  <item><match>__UINT_FAST8_TYPE__</match><fillin>__UINT_FAST8_TYPE__</fillin></item>
  <item><match>__UINT_LEAST16_MAX__</match><fillin>__UINT_LEAST16_MAX__</fillin></item>
  <item><match>__UINT_LEAST16_TYPE__</match><fillin>__UINT_LEAST16_TYPE__</fillin></item>
  <item><match>__UINT_LEAST32_MAX__</match><fillin>__UINT_LEAST32_MAX__</fillin></item>
  <item><match>__UINT_LEAST32_TYPE__</match><fillin>__UINT_LEAST32_TYPE__</fillin></item>
  <item><match>__UINT_LEAST64_MAX__</match><fillin>__UINT_LEAST64_MAX__</fillin></item>
  <item><match>__UINT_LEAST64_TYPE__</match><fillin>__UINT_LEAST64_TYPE__</fillin></item>
  <item><match>__UINT_LEAST8_MAX__</match><fillin>__UINT_LEAST8_MAX__</fillin></item>
  <item><match>__UINT_LEAST8_TYPE__</match><fillin>__UINT_LEAST8_TYPE__</fillin></item>
  <item><match>__UINTMAX_C</match><fillin>__UINTMAX_C</fillin></item>
  <item><match>__UINTMAX_MAX__</match><fillin>__UINTMAX_MAX__</fillin></item>
  <item><match>__UINTMAX_TYPE__</match><fillin>__UINTMAX_TYPE__</fillin></item>
  <item><match>__UINTPTR_MAX__</match><fillin>__UINTPTR_MAX__</fillin></item>
  <item><match>__UINTPTR_TYPE__</match><fillin>__UINTPTR_TYPE__</fillin></item>
  <item><match>__unix</match><fillin>__unix</fillin></item>
  <item><match>__unix__</match><fillin>__unix__</fillin></item>
  <item><match>unix</match><fillin>unix</fillin></item>
  <item><match>__USER_LABEL_PREFIX__</match><fillin>__USER_LABEL_PREFIX__</fillin></item>
  <item><match>__USING_SJLJ_EXCEPTIONS__</match><fillin>__USING_SJLJ_EXCEPTIONS__</fillin></item>
  <item><match>__VA_ARGS__</match><fillin>__VA_ARGS__</fillin></item>
  <item><match>__VERSION__</match><fillin>__VERSION__</fillin></item>
  <item><match>__WCHAR_MAX__</match><fillin>__WCHAR_MAX__</fillin></item>
  <item><match>__WCHAR_MIN__</match><fillin>__WCHAR_MIN__</fillin></item>
  <item><match>__WCHAR_TYPE__</match><fillin>__WCHAR_TYPE__</fillin></item>
  <item><match>__WCHAR_UNSIGNED__</match><fillin>__WCHAR_UNSIGNED__</fillin></item>
  <item><match>__WINT_MAX__</match><fillin>__WINT_MAX__</fillin></item>
  <item><match>__WINT_MIN__</match><fillin>__WINT_MIN__</fillin></item>
  <item><match>__WINT_TYPE__</match><fillin>__WINT_TYPE__</fillin></item>
  <item><match>__x86_64</match><fillin>__x86_64</fillin></item>
  <item><match>__x86_64__</match><fillin>__x86_64__</fillin></item>
  <item><match>__XOP__</match><fillin>__XOP__</fillin></item>
  <item><match>__XSAVE__</match><fillin>__XSAVE__</fillin></item>
  <item><match>__XSAVEOPT__</match><fillin>__XSAVEOPT__</fillin></item>

  <item><match>__PRETTY_FUNCTION__</match><fillin>__PRETTY_FUNCTION__</fillin></item>
  <item><match>__func__</match><fillin>__func__</fillin></item>

  <item>
    <match>__attribute__</match>
    <fillin>__attribute__((${attr}))</fillin>
  </item>
  <item>
    <match>__alignof__</match>
    <displayarguments>(var)</displayarguments>
    <fillin>__alignof__(${var})</fillin>
  </item>

  <!-- Type traits -->
  <item>
    <match>__has_nothrow_assign</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_nothrow_assign(${type})</fillin>
  </item>
  <item>
    <match>__has_nothrow_copy</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_nothrow_copy(${type})</fillin>
  </item>
  <item>
    <match>__has_nothrow_constructor</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_nothrow_constructor(${type})</fillin>
  </item>
  <item>
    <match>__has_trivial_assign</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_trivial_assign(${type})</fillin>
  </item>
  <item>
    <match>__has_trivial_copy</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_trivial_copy(${type})</fillin>
  </item>
  <item>
    <match>__has_trivial_constructor</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_trivial_constructor(${type})</fillin>
  </item>
  <item>
    <match>__has_trivial_destructor</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_trivial_destructor(${type})</fillin>
  </item>
  <item>
    <match>__has_virtual_destructor</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__has_virtual_destructor(${type})</fillin>
  </item>
  <item>
    <match>__is_abstract</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_abstract(${type})</fillin>
  </item>
  <item>
    <match>__is_base_of</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_base_of(${type})</fillin>
  </item>
  <item>
    <match>__is_class</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_class(${type})</fillin>
  </item>
  <item>
    <match>__is_empty</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_empty(${type})</fillin>
  </item>
  <item>
    <match>__is_enum</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_enum(${type})</fillin>
  </item>
  <item>
    <match>__is_pod</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_pod(${type})</fillin>
  </item>
  <item>
    <match>__is_polymorphic</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_polymorphic(${type})</fillin>
  </item>
  <item>
    <match>__is_union</match>
    <displayarguments> (type)</displayarguments>
    <fillin>__is_union(${type})</fillin>
  </item>
  <!-- Builtin functions -->
  <!-- 6.5 Constructing Function Calls -->
  <item>
    <displayprefix>void* </displayprefix>
    <match>__builtin_apply_args</match>
    <displayarguments>()</displayarguments>
    <fillin>__builtin_apply_args()</fillin>
  </item>
  <item>
    <displayprefix>void* </displayprefix>
    <match>__builtin_apply</match>
    <displayarguments>(void (*FUNCTION)(), void* ARGUMENTS, size_t SIZE)</displayarguments>
    <fillin>__builtin_apply(${function}, ${args}, ${size})</fillin>
  </item>
  <item>
    <displayprefix>void </displayprefix>
    <match>__builtin_return</match>
    <displayarguments>(void* RESULT)</displayarguments>
    <fillin>__builtin_return()</fillin>
  </item>
  <item>
    <match>__builtin_va_arg_pack</match>
    <displayarguments>()</displayarguments>
    <fillin>__builtin_va_arg_pack()</fillin>
  </item>
  <item>
    <match>__builtin_va_arg_pack_len</match>
    <displayarguments>()</displayarguments>
    <fillin>__builtin_va_arg_pack_len()</fillin>
  </item>
  <!-- 6.46 Getting the Return or Frame Address of a Function -->
  <item>
    <displayprefix>void* </displayprefix>
    <match>__builtin_return_address</match>
    <displayarguments>(unsigned LEVEL)</displayarguments>
    <fillin>__builtin_return_address(${level})</fillin>
  </item>
  <item>
    <displayprefix>void* </displayprefix>
    <match>__builtin_extract_return_address</match>
    <displayarguments>(void* ADDRESS)</displayarguments>
    <fillin>__builtin_extract_return_address(${address})</fillin>
  </item>
  <item>
    <displayprefix>void* </displayprefix>
    <match>__builtin_frame_address</match>
    <displayarguments>(unsigned LEVEL)</displayarguments>
    <fillin>__builtin_frame_address(${level})</fillin>
  </item>
  <!-- 6.48 Offsetof -->
  <item>
    <displayprefix>off_t </displayprefix>
    <match>__builtin_offsetof</match>
    <displayarguments>(TYPE, MEMBER)</displayarguments>
    <fillin>__builtin_offsetof(${type}, ${member})</fillin>
  </item>
  <!-- 6.50 Object Size Checking Builtins -->
  <item>
    <displayprefix>size_t </displayprefix>
    <match>__builtin_object_size</match>
    <displayarguments>(void* PTR, int TYPE), TYPE=0..3</displayarguments>
    <fillin>__builtin_object_size(${ptr}, ${type})</fillin>
  </item>
  <!-- 6.49 Built-in functions for atomic memory access -->
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_fetch_and_add</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_fetch_and_add(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_fetch_and_sub</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_fetch_and_sub(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_fetch_and_or</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_fetch_and_or(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_fetch_and_and</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_fetch_and_and(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_fetch_and_xor</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_fetch_and_xor(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_fetch_and_nand</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_fetch_and_nand(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_add_and_fetch</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_add_and_fetch(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_sub_and_fetch</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_sub_and_fetch(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_or_and_fetch</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_or_and_fetch(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_xor_and_fetch</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_xor_and_fetch(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_and_and_fetch</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_and_and_fetch(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_nand_and_fetch</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_nand_and_fetch(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>bool </displayprefix>
    <match>__sync_bool_compare_and_swap</match>
    <displayarguments>(bool* ptr, bool new_value, bool old_value)</displayarguments>
    <fillin>__sync_bool_compare_and_swap(${ptr}, ${new_value}, ${old_value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_val_compare_and_swap</match>
    <displayarguments>(TYPE* ptr, TYPE new_value, TYPE old_value)</displayarguments>
    <fillin>__sync_val_compare_and_swap(${ptr}, ${new_value}, ${old_value})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__sync_lock_test_and_set</match>
    <displayarguments>(TYPE* ptr, TYPE value)</displayarguments>
    <fillin>__sync_lock_test_and_set(${ptr}, ${value})</fillin>
  </item>
  <item>
    <displayprefix>void </displayprefix>
    <match>__sync_lock_release</match>
    <displayarguments>(TYPE* ptr)</displayarguments>
    <fillin>__sync_lock_release(${ptr})</fillin>
  </item>
  <item>
    <displayprefix>void </displayprefix>
    <match>__sync_synchronize</match>
    <displayarguments>()</displayarguments>
    <fillin>__sync_synchronize()</fillin>
  </item>

  <!-- 6.51 Other built-in functions provided by GCC -->
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_types_compatible_p</match>
    <displayarguments>(TYPE1, TYPE2)</displayarguments>
    <fillin>__builtin_types_compatible_p(${type1}, ${type2})</fillin>
  </item>
  <item>
    <displayprefix>TYPE </displayprefix>
    <match>__builtin_choose_expr</match>
    <displayarguments>(CONST-EXPR, EXPR1, EXPR2)</displayarguments>
    <fillin>__builtin_choose_expr(${const_expr}, ${expr1}, ${expr2})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_constant_p</match>
    <displayarguments>(EXPR)</displayarguments>
    <fillin>__builtin_constant_p(${expr})</fillin>
  </item>
  <item>
    <displayprefix>long </displayprefix>
    <match>__builtin_expect</match>
    <displayarguments>(long EXP, long CONST)</displayarguments>
    <fillin>__builtin_expect(${expr}, ${const})</fillin>
  </item>
  <item>
    <displayprefix>void </displayprefix>
    <match>__builtin_trap</match>
    <displayarguments>()</displayarguments>
    <fillin>__builtin_trap()</fillin>
  </item>
  <item>
    <displayprefix>void </displayprefix>
    <match>__builtin_unrecheable</match>
    <displayarguments>()</displayarguments>
    <fillin>__builtin_unrecheable()</fillin>
  </item>
  <item>
    <displayprefix>void </displayprefix>
    <match>__builtin__clear_cache</match>
    <displayarguments>(char* BEGIN, char* END)</displayarguments>
    <fillin>__builtin__clear_cache(${begin}, ${end})</fillin>
  </item>
  <item>
    <displayprefix>void </displayprefix>
    <match>__builtin_prefetch</match>
    <displayarguments>(const void* ADDRESS[, RW=0|1, LOCALITY=0..3])</displayarguments>
    <fillin>__builtin_prefetch(${addr})</fillin>
  </item>
  <!-- TODO There is a set of float/double (not so interesting) builtins to add
       ... I'll do this later, cuz too lazy now
    -->
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_ffs</match>
    <displayarguments>(unsigned)</displayarguments>
    <fillin>__builtin_ffs(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_clz</match>
    <displayarguments>(unsigned)</displayarguments>
    <fillin>__builtin_clz(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_ctz</match>
    <displayarguments>(unsigned)</displayarguments>
    <fillin>__builtin_ctz(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_popcount</match>
    <displayarguments>(unsigned)</displayarguments>
    <fillin>__builtin_popcount(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_parity</match>
    <displayarguments>(unsigned)</displayarguments>
    <fillin>__builtin_parity(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_ffsl</match>
    <displayarguments>(unsigned long)</displayarguments>
    <fillin>__builtin_ffsl(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_clzl</match>
    <displayarguments>(unsigned long)</displayarguments>
    <fillin>__builtin_clzl(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_ctzl</match>
    <displayarguments>(unsigned long)</displayarguments>
    <fillin>__builtin_ctzl(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_popcountl</match>
    <displayarguments>(unsigned long)</displayarguments>
    <fillin>__builtin_popcountl(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_parityl</match>
    <displayarguments>(unsigned long)</displayarguments>
    <fillin>__builtin_parityl(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_ffsll</match>
    <displayarguments>(unsigned long long)</displayarguments>
    <fillin>__builtin_ffsll(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_clzll</match>
    <displayarguments>(unsigned long long)</displayarguments>
    <fillin>__builtin_clzll(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_ctzll</match>
    <displayarguments>(unsigned long long)</displayarguments>
    <fillin>__builtin_ctzll(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_popcountll</match>
    <displayarguments>(unsigned long long)</displayarguments>
    <fillin>__builtin_popcountll(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int </displayprefix>
    <match>__builtin_parityll</match>
    <displayarguments>(unsigned long long)</displayarguments>
    <fillin>__builtin_parityll(${arg})</fillin>
  </item>
  <item>
    <displayprefix>double </displayprefix>
    <match>__builtin_powi</match>
    <displayarguments>(double, int)</displayarguments>
    <fillin>__builtin_powi(${arg}, ${degree})</fillin>
  </item>
  <item>
    <displayprefix>float </displayprefix>
    <match>__builtin_powf</match>
    <displayarguments>(float, int)</displayarguments>
    <fillin>__builtin_powif(${arg}, ${degree})</fillin>
  </item>
  <item>
    <displayprefix>long double </displayprefix>
    <match>__builtin_powil</match>
    <displayarguments>(long double, int)</displayarguments>
    <fillin>__builtin_powil(${arg}, ${degree})</fillin>
  </item>
  <item>
    <displayprefix>int32_t </displayprefix>
    <match>__builtin_bswap32</match>
    <displayarguments>(int32_t)</displayarguments>
    <fillin>__builtin_bswap32(${arg})</fillin>
  </item>
  <item>
    <displayprefix>int64_t </displayprefix>
    <match>__builtin_bswap64</match>
    <displayarguments>(int64_t)</displayarguments>
    <fillin>__builtin_bswap64(${arg})</fillin>
  </item>
  <!-- 6.52 Built-in Functions Specific to Particular Target Machines -->
  <!-- TODO Here is a lot of target specific builtins. I'll add them later (when needed) -->


  <!-- Attributes -->
  <!-- 6.29 Declaring Attributes of Functions -->
  <item>
    <match>attr:alias</match>
    <displayarguments>("TARGET")</displayarguments>
    <fillin>alias("${target}")</fillin>
  </item>
  <item>
    <match>attr:aligned</match>
    <displayarguments>(ALIGMENT)</displayarguments>
    <fillin>aligned(${aligment})</fillin>
  </item>
  <item>
    <match>attr:alloc_size</match>
    <displayarguments>(sz1[, sz2])</displayarguments>
    <fillin>alloc_size(${sz1}, ${sz2})</fillin>
  </item>
  <item>
    <match>attr:always_inline</match>
    <fillin>always_inline</fillin>
  </item>
  <item>
    <match>attr:gnu_inline</match>
    <fillin>gnu_inline</fillin>
  </item>
  <item>
    <match>attr:artificial</match>
    <fillin>artificial</fillin>
  </item>
  <item>
    <match>attr:bank_switch</match>
    <fillin>bank_switch</fillin>
  </item>
  <item>
    <match>attr:flatten</match>
    <fillin>flatten</fillin>
  </item>
  <item>
    <match>attr:error</match>
    <displayarguments>("MESSAGE")</displayarguments>
    <fillin>error("${message}")</fillin>
  </item>
  <item>
    <match>attr:warning</match>
    <displayarguments>("MESSAGE")</displayarguments>
    <fillin>warning("${message}")</fillin>
  </item>
  <item>
    <match>attr:cdecl</match>
    <fillin>cdecl</fillin>
  </item>
  <item>
    <match>attr:const</match>
    <fillin>const</fillin>
  </item>
  <item>
    <match>attr:constructor</match>
    <fillin>constructor</fillin>
  </item>
  <item>
    <match>attr:constructor</match>
    <displayarguments>(PRIORITY)</displayarguments>
    <fillin>constructor(${priority})</fillin>
  </item>
  <item>
    <match>attr:destructor</match>
    <fillin>destructor</fillin>
  </item>
  <item>
    <match>attr:destructor</match>
    <displayarguments>(PRIORITY)</displayarguments>
    <fillin>destructor(${priority})</fillin>
  </item>
  <item>
    <match>attr:deprecated</match>
    <fillin>deprecated</fillin>
  </item>
  <item>
    <match>attr:deprecated</match>
    <displayarguments>(MESSAGE)</displayarguments>
    <fillin>deprecated("${message}")</fillin>
  </item>
  <item>
    <match>attr:disinterrupt</match>
    <fillin>disinterrupt</fillin>
  </item>
  <item>
    <match>attr:dllexport</match>
    <fillin>dllexport</fillin>
  </item>
  <item>
    <match>attr:dllimport</match>
    <fillin>dllimport</fillin>
  </item>
  <item>
    <match>attr:eightbit_data</match>
    <fillin>eightbit_data</fillin>
  </item>
  <item>
    <match>attr:exceptoin_handler</match>
    <fillin>exceptoin_handler</fillin>
  </item>
  <item>
    <match>attr:externaly_visible</match>
    <fillin>externaly_visible</fillin>
  </item>
  <item>
    <match>attr:far</match>
    <fillin>far</fillin>
  </item>
  <item>
    <match>attr:fast_interrupt</match>
    <fillin>fast_interrupt</fillin>
  </item>
  <item>
    <match>attr:fastcall</match>
    <fillin>fastcall</fillin>
  </item>
  <item>
    <match>attr:format</match>
    <displayarguments>(printf|scanf|strfitme|strfmon|gnu_printf|gnu_scanf|gnu_strftime, STRING-INDEX, FIRST-TO-CHECK)</displayarguments>
    <fillin>format(${archetype:printf}, ${string_index}, ${first_to_check})</fillin>
  </item>
  <item>
    <match>attr:format_arg</match>
    <displayarguments>(STRING-INDEX)</displayarguments>
    <fillin>format_arg(${string_index})</fillin>
  </item>
  <item>
    <match>attr:function_vector</match>
    <displayarguments>(N)</displayarguments>
    <fillin>function_vector(${N})</fillin>
  </item>
  <item>
    <match>attr:interrupt</match>
    <fillin>interrupt</fillin>
  </item>
  <item>
    <match>attr:interrupt</match>
    <displayarguments>("IRQ|FIQ|SWI|ABORT|UNDEF")</displayarguments>
    <fillin>interrupt("${kind|IRQ}")</fillin>
  </item>
  <item>
    <match>attr:interrupt_handler</match>
    <fillin>interrupt_handler</fillin>
  </item>
  <item>
    <match>attr:interrupt_thread</match>
    <fillin>interrupt_thread</fillin>
  </item>
  <item>
    <match>attr:isr</match>
    <fillin>isr</fillin>
  </item>
  <item>
    <match>attr:kspisup</match>
    <fillin>kspisup</fillin>
  </item>
  <item>
    <match>attr:l1_text</match>
    <fillin>l1_text</fillin>
  </item>
  <item>
    <match>attr:l2</match>
    <fillin>l2</fillin>
  </item>
  <item>
    <match>attr:long_call</match>
    <fillin>long_call</fillin>
  </item>
  <item>
    <match>attr:short_call</match>
    <fillin>short_call</fillin>
  </item>
  <item>
    <match>attr:longcall</match>
    <fillin>longcall</fillin>
  </item>
  <item>
    <match>attr:shortcall</match>
    <fillin>shortcall</fillin>
  </item>
  <item>
    <match>attr:near</match>
    <fillin>near</fillin>
  </item>
  <item>
    <match>attr:malloc</match>
    <fillin>malloc</fillin>
  </item>
  <item>
    <match>attr:mips16</match>
    <fillin>mips16</fillin>
  </item>
  <item>
    <match>attr:nomips16</match>
    <fillin>nomips16</fillin>
  </item>
  <item>
    <match>attr:model</match>
    <displayarguments>(MODEL-NAME)</displayarguments>
    <fillin>model(${model})</fillin>
  </item>
  <item>
    <match>attr:ms_abi</match>
    <fillin>ms_abi</fillin>
  </item>
  <item>
    <match>attr:sysv_abi</match>
    <fillin>sysv_abi</fillin>
  </item>
  <item>
    <match>attr:mshoock_prologue</match>
    <fillin>mshoock_prologue</fillin>
  </item>
  <item>
    <match>attr:naked</match>
    <fillin>naked</fillin>
  </item>
  <item>
    <match>attr:nesting</match>
    <fillin>nesting</fillin>
  </item>
  <item>
    <match>attr:nmi_handler</match>
    <fillin>nmi_handler</fillin>
  </item>
  <item>
    <match>attr:no_instrument_function</match>
    <fillin>no_instrument_function</fillin>
  </item>
  <item>
    <match>attr:noinline</match>
    <fillin>noinline</fillin>
  </item>
  <item>
    <match>attr:noclone</match>
    <fillin>noclone</fillin>
  </item>
  <item>
    <match>attr:nonnull</match>
    <fillin>nonnull</fillin>
  </item>
  <item>
    <match>attr:nonnull</match>
    <displayarguments>(ARG-INDEX, ...)</displayarguments>
    <fillin>nonnull(${arg_index})</fillin>
  </item>
  <item>
    <match>attr:noreturn</match>
    <fillin>noreturn</fillin>
  </item>
  <item>
    <match>attr:nothrow</match>
    <fillin>nothrow</fillin>
  </item>
  <item>
    <match>attr:optimize</match>
    <displayarguments>(NUMBERS|OPTION-STRINGS)</displayarguments>
    <fillin>optimize(${options})</fillin>
  </item>
  <item>
    <match>attr:pcs</match>
    <displayarguments>("aapcs|aapcs-vfp")</displayarguments>
    <fillin>pcs("${convention:aapcs}")</fillin>
  </item>
  <item>
    <match>attr:pure</match>
    <fillin>pure</fillin>
  </item>
  <item>
    <match>attr:hot</match>
    <fillin>hot</fillin>
  </item>
  <item>
    <match>attr:cold</match>
    <fillin>cold</fillin>
  </item>
  <item>
    <match>attr:regparam</match>
    <displayarguments>(NUMBER)</displayarguments>
    <fillin>regparam(${number})</fillin>
  </item>
  <item>
    <match>attr:sseregparam</match>
    <fillin>sseregparam</fillin>
  </item>
  <item>
    <match>attr:force_align_arg_pointer</match>
    <fillin>force_align_arg_pointer</fillin>
  </item>
  <item>
    <match>attr:resbank</match>
    <fillin>resbank</fillin>
  </item>
  <item>
    <match>attr:return_twice</match>
    <fillin>return_twice</fillin>
  </item>
  <item>
    <match>attr:saveall</match>
    <fillin>saveall</fillin>
  </item>
  <item>
    <match>attr:section</match>
    <displayarguments>(SECTION-NAME)</displayarguments>
    <fillin>section("${section_name}")</fillin>
  </item>
  <item>
    <match>attr:sentiel</match>
    <displayarguments>(POSITION)</displayarguments>
    <fillin>sentiel(${position})</fillin>
  </item>
  <item>
    <match>attr:signal</match>
    <fillin>signal</fillin>
  </item>
  <item>
    <match>attr:sp_switch</match>
    <displayarguments>(VAR-NAME)</displayarguments>
    <fillin>sp_switch("${var_name}")</fillin>
  </item>
  <item>
    <match>attr:stdcall</match>
    <fillin>stdcall</fillin>
  </item>
  <item>
    <match>attr:syscall_linkage</match>
    <fillin>syscall_linkage</fillin>
  </item>
  <item>
    <match>attr:target</match>
    <displayarguments>("OPTION[, OPTION, ...]")</displayarguments>
    <fillin>target("${options}")</fillin>
  </item>
  <item>
    <match>attr:tiny_data</match>
    <fillin>tiny_data</fillin>
  </item>
  <item>
    <match>attr:trap_exit</match>
    <fillin>trap_exit</fillin>
  </item>
  <item>
    <match>attr:used</match>
    <fillin>used</fillin>
  </item>
  <item>
    <match>attr:version_id</match>
    <displayarguments>("STRING")</displayarguments>
    <fillin>version_id("${stirng}")</fillin>
  </item>
  <item>
    <match>attr:visibility</match>
    <displayarguments>("default|hidden|protected|interrnal")</displayarguments>
    <fillin>visibility("${type:default}")</fillin>
  </item>
  <item>
    <match>attr:vliw</match>
    <fillin>vliw</fillin>
  </item>
  <item>
    <match>attr:warn_unused_result</match>
    <fillin>warn_unused_result</fillin>
  </item>
  <item>
    <match>attr:weak</match>
    <fillin>weak</fillin>
  </item>
  <item>
    <match>attr:weakref</match>
    <fillin>weakref</fillin>
  </item>
  <item>
    <match>attr:weakref</match>
    <displayarguments>("TARGET-SYMBOL")</displayarguments>
    <fillin>weakref("${target}")</fillin>
  </item>
  <!-- 6.36 Specifying Attributes of Variables -->
  <item>
    <match>attr:cleanup</match>
    <displayarguments>("FUNCTION-NAME")</displayarguments>
    <fillin>cleanup("${function}")</fillin>
  </item>
  <item>
    <match>attr:common</match>
    <fillin>common</fillin>
  </item>
  <item>
    <match>attr:nocommon</match>
    <fillin>nocommon</fillin>
  </item>
  <item>
    <match>attr:mode</match>
    <displayarguments>(byte|word|pointer)</displayarguments>
    <fillin>mode("${mode:bute}")</fillin>
  </item>
  <item>
    <match>attr:packed</match>
    <fillin>packed</fillin>
  </item>
  <item>
    <match>attr:shared</match>
    <fillin>shared</fillin>
  </item>
  <item>
    <match>attr:tls_model</match>
    <displayarguments>("global-dynamic|local-dynamic|initial-exec|local-exec")</displayarguments>
    <fillin>tls_model("${model|global-dynamic}")</fillin>
  </item>
  <item>
    <match>attr:unused</match>
    <fillin>unused</fillin>
  </item>
  <item>
    <match>attr:vector_size</match>
    <displayarguments>(BYTES)</displayarguments>
    <fillin>vector_size(${bytes})</fillin>
  </item>
  <item>
    <match>attr:selectany</match>
    <fillin>selectany</fillin>
  </item>
  <item>
    <match>attr:ms_struct</match>
    <fillin>ms_struct</fillin>
  </item>
  <item>
    <match>attr:gcc_struct</match>
    <fillin>gcc_struct</fillin>
  </item>
  <!-- 6.37 Specifying Attributes of Types -->
  <item>
    <match>attr:transparent_union</match>
    <fillin>__transparent_union__</fillin>
  </item>
  <item>
    <match>attr:may_alias</match>
    <fillin>__may_alias__</fillin>
  </item>

  <!-- Pragma -->
  <item>
    <match>pragma:ms_struct</match>
    <displayarguments> on|off</displayarguments>
    <fillin>#pragma ms_struct ${val}</fillin>
  </item>
  <item>
    <match>pragma:pack</match>
    <displayarguments>(N)</displayarguments>
    <fillin>#pragma pack(${val})</fillin>
  </item>
  <item>
    <match>pragma:pack</match>
    <displayarguments>(push, N)</displayarguments>
    <fillin>#pragma pack(push, ${val})</fillin>
  </item>
  <item>
    <match>pragma:pack</match>
    <displayarguments>(pop)</displayarguments>
    <fillin>#pragma pack(pop)</fillin>
  </item>
  <item>
    <match>pragma:weak</match>
    <displayarguments>SYMBOL</displayarguments>
    <fillin>#pragma weak ${symbol}</fillin>
  </item>
  <item>
    <match>pragma:weak</match>
    <displayarguments>SYMBOL1 = SYMBOL2</displayarguments>
    <fillin>#pragma weak ${symbol1} = ${symbol2}</fillin>
  </item>
  <item>
    <match>pragma:message</match>
    <displayarguments> "STRING"</displayarguments>
    <fillin>#pragma message "${string}"</fillin>
  </item>
  <item>
    <match>pragma:diagnostic</match>
    <displayarguments> KIND "OPTION", where KIND=error|warning|ignored</displayarguments>
    <fillin>#pragma GCC diagnostic ${kind} "${option}"</fillin>
  </item>
  <item>
    <match>pragma:visibility push</match>
    <displayarguments>(VISIBILITY), where VISIBILITY=default, protected, interrnal, hidden</displayarguments>
    <fillin>#pragma GCC visibility push(${visibility})</fillin>
  </item>
  <item>
    <match>pragma:visibility pop</match>
    <fillin>#pragma GCC visibility pop</fillin>
  </item>
  <item>
    <match>pragma:push_macro</match>
    <displayarguments>("MACRO-NAME")</displayarguments>
    <fillin>#pragma GCC push_macro("${name}")</fillin>
  </item>
  <item>
    <match>pragma:pop_macro</match>
    <displayarguments>("MACRO-NAME")</displayarguments>
    <fillin>#pragma GCC pop_macro("${name}")</fillin>
  </item>
  <!-- NOTE Documentation claims that push/pop options work starting from 4.4
            but actually gcc has bug in implementation. It really works starting from 4.5
    -->
  <item>
    <displayprefix>gcc >= 4.5</displayprefix>
    <match>pragma:target</match>
    <displayarguments>("STRING"...)</displayarguments>
    <fillin>#pragma GCC target("${string}")</fillin>
  </item>
  <item>
    <displayprefix>gcc >= 4.5</displayprefix>
    <match>pragma:optimize</match>
    <displayarguments>("STRING"...)</displayarguments>
    <fillin>#pragma GCC optimize("${string}")</fillin>
  </item>
  <item>
    <displayprefix>gcc >= 4.5</displayprefix>
    <match>pragma:push_options</match>
    <fillin>#pragma GCC push_options</fillin>
  </item>
  <item>
    <displayprefix>gcc >= 4.5</displayprefix>
    <match>pragma:pop_options</match>
    <fillin>#pragma GCC pop_options</fillin>
  </item>
  <item>
    <displayprefix>gcc >= 4.4</displayprefix>
    <match>pragma:reset_options</match>
    <fillin>#pragma GCC reset_options</fillin>
  </item>
</snippets>
<!-- kate: indent-width 2; tab-width 2; -->
